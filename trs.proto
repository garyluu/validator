syntax = "proto3";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";


message GetToolClassesResponse {
    repeated ToolClass items = 1;
}

message GetToolsRequest {
    // The author of the tool (TODO a thought occurs, are we assuming that the author of the CWL and the image are the same?).
    string author = 1;
    // The description of the tool.
    string description = 2;
    // A unique identifier of the tool, scoped to this registry, for example `123456`
    string id = 3;
    int32 limit = 4;
    // The name of the image.
    string name = 5;
    string offset = 6;
    // The organization in the registry that published the image.
    string organization = 7;
    // The image registry that contains the image.
    string registry = 8;
    // The name of the tool.
    string toolname = 9;
}

message GetToolsResponse {
    repeated Tool items = 1;
}

message GetToolsIdRequest {
    // A unique identifier of the tool, scoped to this registry, for example `123456`
    string id = 1;
}

message GetToolsIdVersionsRequest {
    // A unique identifier of the tool, scoped to this registry, for example `123456`
    string id = 1;
}

message GetToolsIdVersionsResponse {
    repeated ToolVersion items = 1;
}

message GetToolsIdVersionsVersion_idRequest {
    // A unique identifier of the tool, scoped to this registry, for example `123456`
    string id = 1;
    // An identifier of the tool version, scoped to this registry, for example `v1`
    string version_id = 2;
}

message GetToolsIdVersionsVersion_idDockerfileRequest {
    // A unique identifier of the tool, scoped to this registry, for example `123456`
    string id = 1;
    // An identifier of the tool version for this particular tool registry, for example `v1`
    string version_id = 2;
}

message GetToolsIdVersionsVersion_idTypeDescriptorRequest {
    // A unique identifier of the tool, scoped to this registry, for example `123456`
    string id = 1;
    // The output type of the descriptor. If not specified it is up to the underlying implementation to determine which output type to return. Plain types return the bare descriptor while the "non-plain" types return a descriptor wrapped with metadata. Allowable values are "CWL", "WDL", "PLAIN_CWL", "PLAIN_WDL".
    string type = 2;
    // An identifier of the tool version for this particular tool registry, for example `v1`
    string version_id = 3;
}

message GetToolsIdVersionsVersion_idTypeDescriptorRelative_pathRequest {
    // A unique identifier of the tool, scoped to this registry, for example `123456`
    string id = 1;
    // A relative path to the additional file (same directory or subdirectories), for example 'foo.cwl' would return a 'foo.cwl' from the same directory as the main descriptor
    string relative_path = 2;
    // The output type of the descriptor. If not specified it is up to the underlying implementation to determine which output type to return. Plain types return the bare descriptor while the "non-plain" types return a descriptor wrapped with metadata. Allowable values are "CWL", "WDL", "PLAIN_CWL", "PLAIN_WDL".
    string type = 3;
    // An identifier of the tool version for this particular tool registry, for example `v1`
    string version_id = 4;
}

message GetToolsIdVersionsVersion_idTypeTestsRequest {
    // A unique identifier of the tool, scoped to this registry, for example `123456`
    string id = 1;
    // The output type of the descriptor. If not specified it is up to the underlying implementation to determine which output type to return. Plain types return the bare descriptor while the "non-plain" types return a descriptor wrapped with metadata. Allowable values are "CWL", "WDL", "PLAIN_CWL", "PLAIN_WDL".
    string type = 2;
    // An identifier of the tool version for this particular tool registry, for example `v1`
    string version_id = 3;
}

message GetToolsIdVersionsVersion_idTypeTestsResponse {
    repeated ToolTests items = 1;
}

enum DescriptorType {
    CWL = 0;
    WDL = 1;
}

message Error {
    int32 code = 1;
    string message = 2;
}

message Metadata {
    // The version of the GA4GH tool-registry API supported by this registry
    string api_version = 1;
    // A country code for the registry (ISO 3166-1 alpha-3)
    string country = 2;
    // A friendly name that can be used in addition to the hostname to describe a registry
    string friendly_name = 3;
    // The version of this registry
    string version = 4;
}

message Tool {
    // Contact information for the author of this tool entry in the registry. (More complex authorship information is handled by the descriptor)
    string author = 1;
    // An array of IDs for the applications that are stored inside this tool (for example `https://bio.tools/tool/mytum.de/SNAP2/1`)
    repeated string contains = 2;
    // The description of the tool.
    string description = 3;
    // A unique identifier of the tool, scoped to this registry, for example `123456` or `123456_v1`
    string id = 4;
    // The version of this tool in the registry. Iterates when fields like the description, author, etc. are updated.
    string meta_version = 5;
    // The organization that published the image.
    string organization = 6;
    // Reports whether this tool has been signed.
    bool signed = 7;
    ToolClass toolclass = 8;
    // The name of the tool.
    string toolname = 9;
    // The URL for this tool in this registry, for example `http://agora.broadinstitute.org/tools/123456`
    string url = 10;
    // Reports whether this tool has been verified by a specific organization or individual
    bool verified = 11;
    // Source of metadata that can support a verified tool, such as an email or URL
    string verified_source = 12;
    // A list of versions for this tool
    repeated ToolVersion versions = 13;
}

message ToolClass {
    // A longer explanation of what this class is and what it can accomplish
    string description = 1;
    // The unique identifier for the class
    string id = 2;
    // A short friendly name for the class
    string name = 3;
}

message ToolDescriptor {
    // The descriptor that represents this version of the tool. (CWL or WDL)
    string descriptor = 1;
    DescriptorType type = 2;
    // Optional url to the tool descriptor used to build this image, should include version information, and can include a git hash (e.g. https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/ea2a5db69bd20a42976838790bc29294df3af02b/delly_docker/Delly.cwl )
    string url = 3;
}

message ToolDockerfile {
    // The dockerfile content for this tool.
    string dockerfile = 1;
    // Optional url to the dockerfile used to build this image, should include version information, and can include a git hash  (e.g. https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/c83478829802b4d36374870843821abe1b625a71/delly_docker/Dockerfile )
    string url = 2;
}

message ToolTests {
    // The test JSON content for this tool.
    string test = 1;
    // Optional url to the test JSON used to test this tool
    string url = 2;
}

message ToolVersion {
    // The type (or types) of descriptors available.
    repeated DescriptorType descriptor_type = 1;
    // Reports if this tool has a dockerfile available.
    bool dockerfile = 2;
    // An identifier of the version of this tool for this particular tool registry, for example `v1`
    string id = 3;
    // The docker path to the image (and version) for this tool. (e.g. quay.io/seqware/seqware_full/1.1)
    string image = 4;
    // The version of this tool version in the registry. Iterates when fields like the description, author, etc. are updated.
    string meta_version = 5;
    // The name of the version.
    string name = 6;
    // The URL for this tool in this registry, for example `http://agora.broadinstitute.org/tools/123456/1`
    string url = 7;
    // Reports whether this tool has been verified by a specific organization or individual
    bool verified = 8;
    // Source of metadata that can support a verified tool, such as an email or URL
    string verified_source = 9;
}

service TrsService {
    // Return some metadata that is useful for describing this registry
    // 
    // Return some metadata that is useful for describing this registry
    rpc GetMetadata(google.protobuf.Empty) returns (Metadata) {
      option (google.api.http) = {
        get: "/api/ga4gh/v1.1/metadata"
      };
    }
    // List all tool types
    // 
    // This endpoint returns all tool-classes available
    rpc GetToolClasses(google.protobuf.Empty) returns (GetToolClassesResponse) {
      option (google.api.http) = {
        get: "/api/ga4gh/v1.1/toolClasses"
      };
    }
    // List all tools
    // 
    // This endpoint returns all tools available or a filtered subset using metadata query parameters.
    rpc GetTools(GetToolsRequest) returns (GetToolsResponse) {
      option (google.api.http) = {
        get: "/api/ga4gh/v1.1/tools"
      };
    }
    // List one specific tool, acts as an anchor for self references
    // 
    // This endpoint returns one specific tool (which has ToolVersions nested inside it)
    rpc GetToolsId(GetToolsIdRequest) returns (Tool) {
      option (google.api.http) = {
        get: "/api/ga4gh/v1.1/tools/{id}"
      };
    }
    // List versions of a tool
    // 
    // Returns all versions of the specified tool
    rpc GetToolsIdVersions(GetToolsIdVersionsRequest) returns (GetToolsIdVersionsResponse) {
      option (google.api.http) = {
        get: "/api/ga4gh/v1.1/tools/{id}/versions"
      };
    }
    // List one specific tool version, acts as an anchor for self references
    // 
    // This endpoint returns one specific tool version
    rpc GetToolsIdVersionsVersion_id(GetToolsIdVersionsVersion_idRequest) returns (ToolVersion) {
      option (google.api.http) = {
        get: "/api/ga4gh/v1.1/tools/{id}/versions/{version_id}"
      };
    }
    // Get the dockerfile for the specified image.
    // 
    // Returns the dockerfile for the specified image.
    rpc GetToolsIdVersionsVersion_idDockerfile(GetToolsIdVersionsVersion_idDockerfileRequest) returns (ToolDockerfile) {
      option (google.api.http) = {
        get: "/api/ga4gh/v1.1/tools/{id}/versions/{version_id}/dockerfile"
      };
    }
    // Get the tool descriptor (CWL/WDL) for the specified tool.
    // 
    // Returns the CWL or WDL descriptor for the specified tool.
    rpc GetToolsIdVersionsVersion_idTypeDescriptor(GetToolsIdVersionsVersion_idTypeDescriptorRequest) returns (ToolDescriptor) {
      option (google.api.http) = {
        get: "/api/ga4gh/v1.1/tools/{id}/versions/{version_id}/{type}/descriptor"
      };
    }
    // Get additional tool descriptor files (CWL/WDL) relative to the main file
    // 
    // Returns additional CWL or WDL descriptors for the specified tool in the same or subdirectories
    rpc GetToolsIdVersionsVersion_idTypeDescriptorRelative_path(GetToolsIdVersionsVersion_idTypeDescriptorRelative_pathRequest) returns (ToolDescriptor) {
      option (google.api.http) = {
        get: "/api/ga4gh/v1.1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}"
      };
    }
    // Get an array of test JSONs suitable for use with this descriptor type.
    rpc GetToolsIdVersionsVersion_idTypeTests(GetToolsIdVersionsVersion_idTypeTestsRequest) returns (GetToolsIdVersionsVersion_idTypeTestsResponse) {
      option (google.api.http) = {
        get: "/api/ga4gh/v1.1/tools/{id}/versions/{version_id}/{type}/tests"
      };
    }
}
